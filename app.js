const headElem = document.getElementById("head");
const buttonsElem = document.getElementById("buttons");
const pagesElem = document.getElementById("pages");

//Класс, который представляет сам тест
class Quiz
{
	constructor(type, questions, results)
	{
		//Тип теста: 1 - классический тест с правильными ответами, 2 - тест без правильных ответов
		this.type = type;

		//Массив с вопросами
		this.questions = questions;

		//Массив с возможными результатами
		this.results = results;

		//Количество набранных очков
		this.score = 0;

		//Номер результата из массива
		this.result = 0;

		//Номер текущего вопроса
		this.current = 0;
	}

	Click(index)
	{
		//Добавляем очки
		let value = this.questions[this.current].Click(index);
		this.score += value;

		let correct = -1;

		//Если было добавлено хотя одно очко, то считаем, что ответ верный
		if(value >= 1)
		{
			correct = index;
		}
		else
		{
			//Иначе ищем, какой ответ может быть правильным
			for(let i = 0; i < this.questions[this.current].answers.length; i++)
			{
				if(this.questions[this.current].answers[i].value >= 1)
				{
					correct = i;
					break;
				}
			}
		}

		this.Next();

		return correct;
	}

	//Переход к следующему вопросу
	Next()
	{
		this.current++;
		
		if(this.current >= this.questions.length) 
		{
			this.End();
		}
	}

	//Если вопросы кончились, этот метод проверит, какой результат получил пользователь
	End()
	{
		for(let i = 0; i < this.results.length; i++)
		{
			if(this.results[i].Check(this.score))
			{
				this.result = i;
			}
		}
	}
} 

//Класс, представляющий вопрос
class Question 
{
	constructor(text, answers)
	{
		this.text = text; 
		this.answers = answers; 
	}

	Click(index) 
	{
		return this.answers[index].value; 
	}
}

//Класс, представляющий ответ
class Answer 
{
	constructor(text, value) 
	{
		this.text = text; 
		this.value = value; 
	}
}

//Класс, представляющий результат
class Result 
{
	constructor(text, value)
	{
		this.text = text;
		this.value = value;
	}

	//Этот метод проверяет, достаточно ли очков набрал пользователь
	Check(value)
	{
		if(this.value <= value)
		{
			return true;
		}
		else 
		{
			return false;
		}
	}
}

//Массив с результатами
const results = 
[
	new Result("Вам многому нужно научиться даже с нулевыми навыками в программировании можно обучиться этому ремеслу и стать профессионалом своего дела" , 0),
	new Result("Вы уже неплохо разбираетесь, но опыта пока что маловато. Вам нужно почитать больше литературы и попрактиковаться чтобы стать профессионалом",5),
	new Result("Ваш уровень выше среднего", 10),
	new Result("Вы в совершенстве знаете тему", 15)
];

//Массив с вопросами
const questions = 
[
	new Question("Что происходит на этапе программирования? ", 
	[
		new Answer("Осуществляется построение алгоритма – инструкции, задающей необходимую последовательность действий для решения задачи.", 0),
		new Answer("Определение исходных данных и что требуется найти в решаемой задаче.", 0),
		new Answer("Алгоритм записывается на одном из языков программирования.", 1),
		
	]),

	new Question("Что такое массив? ", 
	[
		new Answer("Алгоритм действий.", 0),
		new Answer("Количество индексов.", 0),
		new Answer("Совокупность фиксированного количества однотипных элементов, которым присвоено общее имя.", 1),
		
	]),

	new Question("Что такое размерность массива? ", 
	[
		new Answer("Совокупность фиксированного количества однотипных элементов, которым присвоено общее имя.", 0),
		new Answer("Количество индексов.", 1),
		new Answer("Алгоритм действий.", 0),
		
	]),

	new Question("Сколько индексов содержит двумерный массив? ", 
	[
		new Answer("2", 1),
		new Answer("1", 0),
		new Answer("0", 0),
		
	]),

	new Question("Выберите описание массива, который имеет значения: 1, 2, 10, 5, 7, 9. ", 
	[
		new Answer("int array[5]={1,2,10,5,7,9};", 0),
		new Answer("int array[6]={1,2,10,5,7,9};", 1),
		new Answer("int array[5]={1 2 10 5 7 9};", 0),
		
	]),

	new Question("Что обязательно должно быть в описании массива? ", 
	[
		new Answer("Имя массива и его размер.", 0),
		new Answer("Тип элементов и их имя.", 0),
		new Answer("Имя массива, количество элементов и их тип.", 1),
		
	]),

	new Question("Что такое вспомогательный алгоритм? ", 
	[
		new Answer("Алгоритм, в котором перераспределяются элементы в определённом порядке.", 0),
		new Answer("Алгоритм, в котором прямо или косвенно содержится ссылка на него же как на вспомогательный алгоритм.", 0),
		new Answer("Алгоритм, целиком используемый в составе другого алгоритма.", 1),
		
	]),

	new Question(" Что такое функция?", 
	[
		new Answer("Подпрограмма, имеющая единственный результат, записываемый в ячейку памяти, имя которой совпадает с именем функции.", 0),
		new Answer("Алгоритм, в котором прямо или косвенно содержится ссылка на него же как на вспомогательный алгоритм.", 0),
		new Answer("Подпрограмма, имеющая произвольное количество входных и выходных данных.", 1),
		
	]),

	new Question("Что используется для записи вспомогательных алгоритмов в языке C++? ", 
	[
		new Answer("Операторы.", 0),
		new Answer("Процедуры.", 0),
		new Answer("Функции.", 1),
		
	]),

	new Question("Как можно заполнить массив? ", 
	[
		new Answer("Присвоить элементам некоторые значения в программе.", 0),
		new Answer("Ввести значения каждого элемента с клавиатуры или присвоить элементам некоторые значения в программе.", 1),
		new Answer("Имя массива, количество элементов и их тип.", 0),
		
	]),

	new Question("Что необходимо сделать, если в задаче требуется определить количество элементов, удовлетворяющих некоторому условию? ", 
	[
		new Answer("Ввести переменную, значение которой будет увеличиваться на единицу каждый раз, когда найден нужный элемент.", 1),
		new Answer("Ввести переменную, к значению которой прибавляют значение найденного элемента массива.", 0),
		new Answer("Ввести переменную, значение которой будет уменьшается на единицу каждый раз, когда найден нужный элемент.", 0),
		
	]),

	new Question(" Что необходимо сделать, если в задаче требуется определить сумму значений элементов, удовлетворяющих некоторому условию?", 
	[
		new Answer("Ввести переменную, значение которой будет увеличиваться на единицу каждый раз, когда найден нужный элемент.", 0),
		new Answer("Ввести переменную, к значению которой прибавляют значение найденного элемента массива.", 1),
		new Answer("Ввести переменную, значение которой будет уменьшается на единицу каждый раз, когда найден нужный элемент.", 0),
		
	]),

	new Question("Что необходимо сделать, чтобы вызвать функцию типа int?", 
	[
		new Answer("Достаточно указать имя функции.", 0),
		new Answer("Достаточно указать имя функции со списком фактических параметров только в потоке cout.", 0 ),
		new Answer("Достаточно указать имя функции со списком фактических параметров в любом выражении, c помощью присваивания или в потоке cout.", 1),
		
	]),

	new Question("Что такое следование? ", 
	[
		new Answer("Алгоритмическая конструкция, в которой в зависимости от результата проверки условия (да/нет) предусмотрен выбор одной из двух последовательностей действий.", 0),
		new Answer("Алгоритмическая конструкция, отображающая естественный, последовательный порядок действий.", 1),
		new Answer("Алгоритмическая конструкция, представляющая собой последовательность действий, выполняемых многократно.", 0),
		
	]),

	new Question("Что такое ветвление? ", 
	[
		new Answer("Алгоритмическая конструкция, представляющая собой последовательность действий, выполняемых многократно.", 0),
		new Answer("Алгоритмическая конструкция, в которой в зависимости от результата проверки условия (да/нет) предусмотрен выбор одной из двух последовательностей действий.", 1),
		new Answer("Алгоритмическая конструкция, отображающая естественный, последовательный порядок действий.", 0),
		
	]),

	new Question("Для чего используется поток cin? ", 
	[
		new Answer("Для вывода данных из оперативной памяти на экран монитора.", 0),
		new Answer("Для ввода в оперативную память значений переменных.", 1),
		new Answer("Для начала выполнения программы.", 0),
		
	]),

	new Question("Для чего используется поток cout? ", 
	[
		new Answer("Для вывода данных из оперативной памяти на экран монитора.", 1),
		new Answer("Для ввода в оперативную память значений переменных.", 0),
		new Answer("Для начала выполнения программы.", 0),
		
	]),

	new Question("Как описывается цикл с параметром? ", 
	[
		new Answer("while <условие> <операторы>", 0),
		new Answer("for (<параметр> = <начальное_значение>; <конечное_значение>; <оператор>)", 1),
		new Answer("do <операторы> while <условие>", 0),
		
	]),

	new Question("Что такое отладка? ", 
	[
		new Answer("Процесс проверки работоспособности программы и исправления обнаруженных при этом ошибок.", 1),
		new Answer("Варианты значений исходных данных, для которых известен ожидаемый результат.", 0),
		new Answer("Процесс проверки работоспособности программы и удаление обнаруженных при этом ошибок.", 0),
		
	]),

	new Question("Дискретность - это свойство алгоритма означающее … ", 
	[
		new Answer("однозначность правил выполнения алгоритма.", 0),
		new Answer("правильность результатов выполнения алгоритма.", 0),
		new Answer("деление алгоритма на отдельные шаги.", 1),
		
	])


];

//Сам тест
const quiz = new Quiz(1, questions, results);

Update();

//Обновление теста
function Update()
{
	//Проверяем, есть ли ещё вопросы
	if(quiz.current < quiz.questions.length) 
	{
		//Если есть, меняем вопрос в заголовке
		headElem.innerHTML = quiz.questions[quiz.current].text;

		//Удаляем старые варианты ответов
		buttonsElem.innerHTML = "";

		//Создаём кнопки для новых вариантов ответов
		for(let i = 0; i < quiz.questions[quiz.current].answers.length; i++)
		{
			let btn = document.createElement("button");
			btn.className = "button";

			btn.innerHTML = quiz.questions[quiz.current].answers[i].text;

			btn.setAttribute("index", i);

			buttonsElem.appendChild(btn);
		}
		
		//Выводим номер текущего вопроса
		pagesElem.innerHTML = (quiz.current + 1) + " / " + quiz.questions.length;

		//Вызываем функцию, которая прикрепит события к новым кнопкам
		Init();
	}
	else
	{
		//Если это конец, то выводим результат
		buttonsElem.innerHTML = "";
		headElem.innerHTML = quiz.results[quiz.result].text;
		pagesElem.innerHTML = "Очки: " + quiz.score;
	}
}

function Init()
{
	//Находим все кнопки
	let btns = document.getElementsByClassName("button");

	for(let i = 0; i < btns.length; i++)
	{
		//Прикрепляем событие для каждой отдельной кнопки
		//При нажатии на кнопку будет вызываться функция Click()
		btns[i].addEventListener("click", function (e) { Click(e.target.getAttribute("index")); });
	}
}

function Click(index) 
{
	//Получаем номер правильного ответа
	let correct = quiz.Click(index);

	//Находим все кнопки
	let btns = document.getElementsByClassName("button");

	//Делаем кнопки серыми
	for(let i = 0; i < btns.length; i++)
	{
		btns[i].className = "button button_passive";
	}

	//Если это тест с правильными ответами, то мы подсвечиваем правильный ответ зелёным, а неправильный - красным
	if(quiz.type == 1)
	{
		if(correct >= 0)
		{
			btns[correct].className = "button button_correct";
		}

		if(index != correct) 
		{
			btns[index].className = "button button_wrong";
		} 
	}
	else
	{
		//Иначе просто подсвечиваем зелёным ответ пользователя
		btns[index].className = "button button_correct";
	}

	//Ждём секунду и обновляем тест
	setTimeout(Update, 1000);
}